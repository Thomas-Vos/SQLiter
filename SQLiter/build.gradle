/*
 * Copyright (C) 2018 Touchlab, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        google()
        gradlePluginPortal()
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
    }
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
}

group = GROUP
version = VERSION_NAME

kotlin {
    targets {
        
        fromPreset(presets.jvm, 'jvm')
        
//                fromPreset(presets.macosX64, 'nativeCommon')

        fromPreset(presets.macosX64, 'macos'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
                it.kotlinOptions.freeCompilerArgs += ["-native-library", "../KotlinCpp/bcdist/macos_x64/tlruntime.bc"]
            }
        }

        fromPreset(presets.mingwX64, 'mingw'){
            compilations.each {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-Lc:\\msys64\\mingw64\\lib"]
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
            }
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-native-library", "../KotlinCpp/bcdist/mingw_x64/tlruntime.bc"]
            }
        }

        fromPreset(presets.iosX64, 'iosX64'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
                it.kotlinOptions.freeCompilerArgs += ["-native-library", "../KotlinCpp/bcdist/ios_x64/tlruntime.bc"]
            }
        }
        
        fromPreset(presets.iosArm64, 'iosArm64'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
                it.kotlinOptions.freeCompilerArgs += ["-native-library", "../KotlinCpp/bcdist/ios_arm64/tlruntime.bc"]
            }
        }
        
        fromPreset(presets.iosArm32, 'iosArm32'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
                it.kotlinOptions.freeCompilerArgs += ["-native-library", "../KotlinCpp/bcdist/ios_arm32/tlruntime.bc"]
            }
        }

        fromPreset(presets.watchosArm32, 'watchosArm32'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
            }
        }
        fromPreset(presets.watchosArm64, 'watchosArm64'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
            }
        }
        fromPreset(presets.watchosX86, 'watchosX86'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
            }
        }
        fromPreset(presets.tvosArm64, 'tvosArm64'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
            }
        }
        fromPreset(presets.tvosX64, 'tvosX64'){
            compilations.test {
                it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "co.touchlab:stately-common:$STATELY_VERSION"
                implementation "co.touchlab:stately-concurrency:$STATELY_VERSION"
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        mingwMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }

        nativeCommonMain { }
        nativeCommonTest { }

        appleMain {
            dependsOn nativeCommonMain
        }

        configure([mingwMain]) {
            dependsOn nativeCommonMain
        }

        configure([iosX64Main, iosArm64Main, macosMain, iosArm32Main, watchosArm32Main, watchosArm64Main, watchosX86Main, tvosArm64Main, tvosX64Main]) {
            dependsOn appleMain
        }

        configure([iosX64Test, iosArm64Test, macosTest, iosArm32Test, watchosArm32Test, watchosArm64Test, watchosX86Test, tvosArm64Test, tvosX64Test, mingwTest]) {
            dependsOn nativeCommonTest
        }
    }
}

configurations {
    compileClasspath
}

void mergeCppOutput(String archFolder, String archZip){
    try {
        ant.zip(
                update: "true",
                destfile: "${project.buildDir}/classes/kotlin/$archFolder/main/sqliter.klib"
        ) {
            zipfileset(
                    dir: "${project.projectDir}/../KotlinCpp/bcdist/$archZip",
                    prefix: "targets/$archZip/native"
            ) {
                include(name: '**.bc')
            }
        }
    } catch (Throwable t) {

    }
}

task mergeCppAll(dependsOn:build) {
    doLast {
        mergeCppOutput("iosArm32", "ios_arm32")
        mergeCppOutput("iosArm64", "ios_arm64")
        mergeCppOutput("iosX64", "ios_x64")
        mergeCppOutput("macos", "macos_x64")
        mergeCppOutput("watchosArm32", "watchos_arm32")
        mergeCppOutput("watchosArm64", "watchos_arm64")
        mergeCppOutput("watchosX86", "watchos_x86")
        mergeCppOutput("tvosArm64", "tvos_arm64")
        mergeCppOutput("tvosX64", "tvos_x64")
        mergeCppOutput("mingw", "mingw_x64")
    }
}

apply from: "$rootDir/gradle/gradle-mvn-mpp-push.gradle"

tasks.findByName("publish").dependsOn("mergeCppAll")
tasks.findByName("publishToMavenLocal").dependsOn("mergeCppAll")
